---
title: "EUPP Case"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 2
    self-contained: true
---

```{r setup}
library("tidyverse")
library("bamlss")
```

```{r utils}
train_models <- function(df) {
    df$log_ens_sd <- log(df$ens_sd)

    f <- list(
        t2m_obs ~ s(yday, bs = "cc") + s(yday, bs = "cc", by = ens_mean),
        ~ s(yday, bs = "cc") + s(yday, bs = "cc", by = log_ens_sd)
    )
    b <- bamlss(f, data = df)

    return(b)
}

c95 <- function (x) {
    qx <- quantile(x, probs = c(0.025, 0.50, 0.975), na.rm = TRUE)
    names(qx) <- c("lower", "mid", "upper")
    return(qx)
}

predict_effects <- function(b, file_name) {
    nd <- data.frame(yday = 0:366, ens_mean = 1, log_ens_sd = 1)

    fit_beta0 <- predict(b, nd, term = "s(yday)", intercept = FALSE, type = "link", FUN = c95, model = "mu") %>%
        as_tibble() %>%
        mutate(yday = nd$yday) %>%
        pivot_longer(-yday, names_to = "q") %>%
        mutate(param = "mu", coef = "varying_intercept")

    fit_beta1 <- predict(b, nd, term = "s(yday,by=ens_mean)", intercept = FALSE, type = "link", FUN = c95, model = "mu") %>%
        as_tibble() %>%
        mutate(yday = nd$yday) %>%
        pivot_longer(-yday, names_to = "q") %>%
        mutate(param = "mu", coef = "varying_coef")

    fit_gamma0 <- predict(b, nd, term = "s(yday)", intercept = FALSE, type = "link", FUN = c95, model = "sigma") %>%
        as_tibble() %>%
        mutate(yday = nd$yday) %>%
        pivot_longer(-yday, names_to = "q") %>%
        mutate(param = "sigma", coef = "varying_intercept")

    fit_gamma1 <- predict(b, nd, term = "s(yday,by=log_ens_sd)", intercept = FALSE, type = "link", FUN = c95, model = "sigma") %>%
        as_tibble() %>%
        mutate(yday = nd$yday) %>%
        pivot_longer(-yday, names_to = "q") %>%
        mutate(param = "sigma", coef = "varying_coef")

    rval <- bind_rows(fit_beta0, fit_beta1, fit_gamma0, fit_gamma1) %>%
        mutate(station = str_sub(file_name, 9, 12), step = str_sub(file_name, 14, 16))

    return(rval)
}
```

```{r read-data}
files <- list.files(pattern = "euppens.*csv")
data <- map(files, read_csv)
names(data) <- files
```

```{r model}
models <- map(data, train_models)
```

```{r predict}
effects <- map2_dfr(models, files, predict_effects)
```

```{r plot}
d_plt <- effects %>%
    filter(coef == "varying_coef") %>%
    select(-coef)

ggplot(d_plt) +
    geom_line(aes(x = yday, y = value, linetype = q, group = interaction(station, q), col = station)) +                         
    facet_wrap(c("step", "param"))  
```