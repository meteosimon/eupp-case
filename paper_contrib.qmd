---
title: "EUPP Case"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 2
    self-contained: true
---

```{r suppress_startup_msg, include = FALSE}
suppressPackageStartupMessages("tidyverse")
suppressPackageStartupMessages("bamlss")
```

```{r setup}
library("tidyverse")
library("bamlss")
```

```{r utils}
train_models <- function(df, verbose = FALSE) {
    df$log_ens_sd <- log(df$ens_sd)

    f <- list(
        t2m_obs ~ s(yday, bs = "cc") + s(yday, bs = "cc", by = ens_mean),
        ~ s(yday, bs = "cc") + s(yday, bs = "cc", by = log_ens_sd)
    )
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # TODO(R): For development only; cache bamlss models
    require("digest")
    cached_mod <- sprintf("_cached_bamlss_%s_%s.rds", digest(df), digest(f))
    if (file.exists(cached_mod)) {
        return(readRDS(cached_mod))
    }
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    b <- bamlss(f, data = df, verbose = verbose)

    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    saveRDS(b, cached_mod)
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    return(b)
}

c95 <- function (x) {
    qx <- quantile(x, probs = c(0.025, 0.50, 0.975), na.rm = TRUE)
    names(qx) <- c("lower", "mid", "upper")
    return(qx)
}

predict_effects <- function(b, file_name) {
    # Extracting station ID and forecast step (in hours) form csv file name
    station <- regmatches(file_name, regexpr("(?<=[_])[0-9]+(?=_)", file_name, perl = TRUE)) # char!
    step    <- as.integer(regmatches(file_name, regexpr("(?<=_)[0-9]+(?=\\.csv$)", file_name, perl = TRUE)))
    
    # Setting up 'grid' (df) with effects to be computed
    args <- data.frame(term  = c("s(yday)", "s(yday,by=ens_mean)", "s(yday)", "s(yday,by=log_ens_sd)"),
                       param = rep(c("mu", "sigma"), each = 2),
                       coef  = paste("varying", rep(c("intercept", "coef"), times = 2), sep = "_"))
            
    # Compute effects
    res <- list()
    nd  <- data.frame(yday = 0:366, ens_mean = 1, log_ens_sd = 1)
    for (i in seq_len(NROW(args))) {
        res[[i]] <- predict(b, nd, term = args$term[i], intercept = FALSE, type = "link", FUN = c95, model = args$param[i]) %>%
                    as_tibble() %>%
                    mutate(yday = nd$yday) %>%
                    pivot_longer(-yday, names_to = "prob") %>%
                    mutate(param = args$param[i], coef = args$coef[i], step = step, station = station)
    }
    return(bind_rows(res))
}
```

```{r read-data}
files <- list.files(pattern = "euppens.*csv")
data  <- setNames(map(files, read_csv), files)
```

```{r model}
models <- setNames(map(data, train_models), files)
```

```{r predict}
effects <- map2_dfr(models, files, predict_effects)
```

```{r plot}
d_plt <- effects %>%
    filter(coef == "varying_coef") %>%
    select(-coef) %>%
    mutate(lty = ifelse(prob == "mid", "1", "4"))

gm <- ggplot(subset(d_plt, param == "mu") %>% mutate(param = "beta_1")) +
      geom_line(aes(x = yday, y = value, linetype = lty, group = interaction(station, prob), col = station)) +                         
      facet_grid(rows = vars(step), cols = vars(param)) +
      ylab("") +
      guides(linetype = "none") +
      theme_minimal()
      
gs <- ggplot(subset(d_plt, param == "sigma") %>% mutate(param = "gamma_1")) +
      geom_line(aes(x = yday, y = value, linetype = lty, group = interaction(station, prob), col = station)) +                         
      facet_grid(rows = vars(step), cols = vars(param)) +
      ylab("") +
      guides(linetype = "none") +
      theme_minimal()


library("lemon")
grid_arrange_shared_legend(gm, gs, ncol = 2, position = "right")
```

```{r plot2}
d_plt_ic <- effects %>%
    filter(coef == "varying_intercept") %>%
    select(-coef) %>%
    mutate(lty = ifelse(prob == "mid", "1", "4"))

gm_ic <- ggplot(subset(d_plt_ic, param == "mu") %>% mutate(param = "beta_0")) +
         geom_line(aes(x = yday, y = value, linetype = lty, group = interaction(station, prob), col = station)) +                         
         facet_grid(rows = vars(step), cols = vars(param)) +
         ylab("") +
         guides(linetype = "none") +
         theme_minimal()

gs_ic <- ggplot(subset(d_plt_ic, param == "sigma") %>% mutate(param = "gamma_0")) +
         geom_line(aes(x = yday, y = value, linetype = lty, group = interaction(station, prob), col = station)) +                         
         facet_grid(rows = vars(step), cols = vars(param)) +
         ylab("") +
         guides(linetype = "none") +
         theme_minimal()

library("lemon")
grid_arrange_shared_legend(gm_ic, gs_ic, ncol = 2, position = "right")
```

```{r combine-plots}
grid_arrange_shared_legend(gm_ic, gm, gs_ic, gs, ncol = 4, position = "bottom")
```